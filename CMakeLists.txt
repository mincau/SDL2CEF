PROJECT(SDLCEF)
CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

IF(NOT CMAKE_BUILD_TYPE )
  SET(CMAKE_BUILD_TYPE Debug)
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
SET(CEF_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/cefroot/")
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CEF_ROOT}/cmake")
FIND_PACKAGE(CEF REQUIRED)

SET(CMAKE_C_FLAGS "-Wall -Wno-unused-variable -std=c99")
SET(CMAKE_CXX_FLAGS "-std=c++14 -Wall -Wno-unused-variable")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS} -O0 -g")
SET(CMAKE_C_FLAGE_RELEASE "${CMAKE_C_FLAGS} -O3 -Wall")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -O0 -g")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3 -Wall")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,\'\$ORIGIN\' ")
SET(CMAKE_EXE_LINKER_FLAGS_Release "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,\'\$ORIGIN\' ")


INCLUDE(cmake/include/sdl2.cmake)
SET(SDLCEF_SRC main.cpp SDLCEFClient.cpp SDLCEFRender.cpp)
SET(SDLCEF_HEADER SDLCEFClient.hpp SDLCEFRender.hpp SDLCEFHelper.hpp)

add_subdirectory(${CEF_LIBCEF_DLL_WRAPPER_PATH} libcef_dll_wrapper)

ADD_EXECUTABLE(SDLCEF ${SDLCEF_HEADER} ${SDLCEF_SRC})
SET_EXECUTABLE_TARGET_PROPERTIES(SDLCEF)
ADD_DEPENDENCIES(SDLCEF libcef_dll_wrapper)

TARGET_LINK_LIBRARIES(SDLCEF ${SDL2_LIBRARIES} libcef_dll_wrapper ${CEF_LIB_RELEASE})
TARGET_INCLUDE_DIRECTORIES(SDLCEF PUBLIC ${SDL_INCLUDE_DIRS} ${CEF_INCLUDE_PATH} "${CEF_INCLUDE_PATH}include")
TARGET_COMPILE_OPTIONS(SDLCEF PUBLIC ${SDL2_CFLAGS_OTHER})

COPY_FILES(SDLCEF "${CEF_BINARY_FILES}" "${CEF_BINARY_DIR_RELEASE}" "${CMAKE_BINARY_DIR}")
COPY_FILES(SDLCEF "${CEF_RESOURCE_FILES}" "${CEF_RESOURCE_DIR}" "${CMAKE_BINARY_DIR}")

SET_LINUX_SUID_PERMISSIONS(SDLCEF "${CMAKE_BINARY_DIR}/chrome-sandbox")
